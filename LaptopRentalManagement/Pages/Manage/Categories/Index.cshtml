@page
@model LaptopRentalManagement.Pages.Manage.Categories.IndexModel
@{
    ViewData["Title"] = "Category Management";
    Layout = "~/Pages/Shared/_AdminLayout.cshtml";
}

<div class="container-fluid py-4">
    <!-- Page Header -->
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h1 class="h3 mb-0">Category Management</h1>
                    <p class="text-muted mb-0">Manage laptop categories in the system</p>
                </div>
                <button type="button" class="btn btn-primary" data-bs-toggle="modal"
                        data-bs-target="#createCategoryModal">
                    <i class="fas fa-plus"></i> Add Category
                </button>
            </div>
        </div>
    </div>

    <!-- Stats Cards -->
    <div class="row mb-4">
        <div class="col-xl-3 col-md-6">
            <div class="card bg-primary text-white mb-4">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <div class="small text-white-50">Total Categories</div>
                            <div class="h4 mb-0">@Model.Categories.Count()</div>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-list fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-md-6">
            <div class="card bg-success text-white mb-4">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <div class="small text-white-50">With Laptops</div>
                            <div class="h4 mb-0">@Model.Categories.Count(c => c.LaptopCount > 0)</div>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-laptop fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-md-6">
            <div class="card bg-warning text-white mb-4">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <div class="small text-white-50">Empty</div>
                            <div class="h4 mb-0">@Model.Categories.Count(c => c.LaptopCount == 0)</div>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-folder-open fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-md-6">
            <div class="card bg-info text-white mb-4">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <div class="small text-white-50">Total Laptops</div>
                            <div class="h4 mb-0">@Model.Categories.Sum(c => c.LaptopCount)</div>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-calculator fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Categories Table -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">Categories List</h5>
                </div>
                <div class="card-body">
                    @if (Model.Categories.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>Name</th>
                                    <th>Icon</th>
                                    <th>Description</th>
                                    <th>Laptops</th>
                                    <th>Created Date</th>
                                    <th>Actions</th>
                                </tr>
                                </thead>
                                <tbody>
                                @foreach (var category in Model.Categories)
                                {
                                    <tr>
                                        <td>@category.CategoryId</td>
                                        <td>
                                            <strong>@category.Name</strong>
                                        </td>
                                        <td>
                                            @if (!string.IsNullOrEmpty(category.IconClass))
                                            {
                                                <i class="@category.IconClass"></i>
                                            }
                                            else
                                            {
                                                <i class="fas fa-folder text-muted"></i>
                                            }
                                        </td>
                                        <td>
                                            @if (!string.IsNullOrEmpty(category.Description))
                                            {
                                                @(category.Description.Length > 50 ? category.Description.Substring(0, 50) + "..." : category.Description)
                                            }
                                            else
                                            {
                                                <span class="text-muted">No description</span>
                                            }
                                        </td>
                                        <td>
                                                <span
                                                    class="badge @(category.LaptopCount > 0 ? "bg-success" : "bg-secondary")">
                                                    @category.LaptopCount laptops
                                                </span>
                                        </td>
                                        <td>@category.CreatedAt.ToString("MM/dd/yyyy HH:mm")</td>
                                        <td>
                                            <div class="btn-group" role="group">
                                                <button type="button" class="btn btn-sm btn-outline-info"
                                                        title="View details"
                                                        onclick="viewCategory(@category.CategoryId)">
                                                    <i class="fas fa-eye"></i>
                                                </button>
                                                <button type="button"
                                                        class="btn btn-sm btn-outline-warning"
                                                        title="Edit"
                                                        onclick="editCategory(
                                                        @category.CategoryId,
                                                        '@category.Name',
                                                        '@category.IconClass',
                                                        '@category.Description'
                                                        )">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                                @if (category.LaptopCount == 0)
                                                {
                                                    <button type="button" class="btn btn-sm btn-outline-danger"
                                                            title="Delete"
                                                            onclick="confirmDelete(@category.CategoryId, '@category.Name')">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                }
                                                else
                                                {
                                                    <button type="button" class="btn btn-sm btn-outline-secondary"
                                                            title="Cannot delete (has laptops)" disabled>
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                }
                                            </div>
                                        </td>
                                    </tr>
                                }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <i class="fas fa-folder-open fa-3x text-muted mb-3"></i>
                            <h5 class="text-muted">No categories found</h5>
                            <p class="text-muted">Click "Add Category" button to create your first category.</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Create Category Modal -->
<div class="modal fade" id="createCategoryModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add New Category</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="createCategoryForm" method="post" asp-page-handler="Create">
                @Html.AntiForgeryToken()
                <div class="modal-body">

                    <div class="mb-3">
                        <label for="createName" class="form-label">
                            Category Name <span class="text-danger">*</span>
                        </label>
                        <input
                            type="text"
                            class="form-control"
                            id="createName"
                            name="Name"
                            required
                            placeholder="Enter category name"/>
                        <div class="invalid-feedback" id="createNameError"></div>
                    </div>

                    <div class="mb-3">
                        <label for="createIconClass" class="form-label">
                            Icon Class <span class="text-danger">*</span>
                        </label>
                        <input
                            type="text"
                            class="form-control"
                            id="createIconClass"
                            name="IconClass"
                            required
                            placeholder="e.g. fas fa-laptop"/>
                        <div class="form-text">Use the FontAwesome CSS class for your icon.</div>
                        <div class="invalid-feedback" id="createIconClassError"></div>
                    </div>

                    <div class="mb-3">
                        <label for="createDescription" class="form-label">
                            Description
                        </label>
                        <textarea
                            class="form-control"
                            id="createDescription"
                            name="Description"
                            rows="3"
                            placeholder="Enter a detailed description for this category…"></textarea>
                        <div class="invalid-feedback" id="createDescriptionError"></div>
                    </div>

                </div>
                <div class="modal-footer">
                    <button
                        type="button"
                        class="btn btn-secondary"
                        data-bs-dismiss="modal">
                        Cancel
                    </button>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save"></i> Save Category
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit Category Modal -->
<div class="modal fade" id="editCategoryModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Category</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="editCategoryForm" method="post" asp-page-handler="Update">
                @Html.AntiForgeryToken()
                <div class="modal-body">
                    <input type="hidden" id="editCategoryId" name="CategoryId"/>

                    <div class="mb-3">
                        <label for="editName" class="form-label">Category Name <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" id="editName" name="Name"
                               required placeholder="Enter category name"/>
                        <div class="invalid-feedback" id="editNameError"></div>
                    </div>

                    <div class="mb-3">
                        <label for="editIconClass" class="form-label">Icon Class <span
                                class="text-danger">*</span></label>
                        <input type="text" class="form-control" id="editIconClass" name="IconClass"
                               required placeholder="e.g. fas fa-laptop"/>
                        <div class="form-text">Use FontAwesome CSS class</div>
                        <div class="invalid-feedback" id="editIconClassError"></div>
                    </div>

                    <div class="mb-3">
                        <label for="editDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="editDescription" name="Description" rows="3"
                                  placeholder="Enter description..."></textarea>
                        <div class="invalid-feedback" id="editDescriptionError"></div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save"></i> Update
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- View Category Modal -->
<div class="modal fade" id="viewCategoryModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Category Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <dl class="row">
                    <dt class="col-sm-4">ID:</dt>
                    <dd class="col-sm-8" id="viewCategoryId"></dd>

                    <dt class="col-sm-4">Name:</dt>
                    <dd class="col-sm-8" id="viewCategoryName"></dd>
                    
                    <dt class="col-sm-4">Icon:</dt>
                    <dd class="col-sm-8"><i id="viewCategoryIcon"></i></dd>

                    <dt class="col-sm-4">Description:</dt>
                    <dd class="col-sm-8" id="viewCategoryDescription"></dd>

                    <dt class="col-sm-4">Laptops:</dt>
                    <dd class="col-sm-8" id="viewCategoryLaptopCount"></dd>

                    <dt class="col-sm-4">Created Date:</dt>
                    <dd class="col-sm-8" id="viewCategoryCreatedAt"></dd>
                </dl>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete the category <strong id="deleteCategoryName"></strong>?</p>
                <p class="text-warning">This action cannot be undone!</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <form id="deleteForm" method="post" class="d-inline">
                    <input type="hidden" name="id" id="deleteCategoryId"/>
                    <button type="submit" class="btn btn-danger">Delete</button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // View Category Function
        async function viewCategory(categoryId) {
            try {
                const response = await fetch(`/Manage/Categories?handler=GetCategory&id=${categoryId}`);
                if (response.ok) {
                    const category = await response.json();

                    document.getElementById('viewCategoryId').textContent = category.categoryId;
                    document.getElementById('viewCategoryName').textContent = category.name;
                    
                    // Set icon class
                    const iconEl = document.getElementById('viewCategoryIcon');
                    if (category.iconClass) {
                        iconEl.className = category.iconClass;
                    } else {
                        iconEl.className = 'fas fa-folder text-muted';
                    }
                    
                    document.getElementById('viewCategoryDescription').textContent = category.description || 'No description';
                    document.getElementById('viewCategoryLaptopCount').innerHTML =
                        `<span class="badge ${category.laptopCount > 0 ? 'bg-success' : 'bg-secondary'}">${category.laptopCount} laptops</span>`;
                    document.getElementById('viewCategoryCreatedAt').textContent =
                        new Date(category.createdAt).toLocaleDateString('en-US') + ' ' +
                        new Date(category.createdAt).toLocaleTimeString('en-US');

                    var viewModal = new bootstrap.Modal(document.getElementById('viewCategoryModal'));
                    viewModal.show();
                }
            } catch (error) {
                console.error('Error fetching category details:', error);
                alert('Error loading category information');
            }
        }

        // Edit Category Function
        function editCategory(id, name, iconClass, description) {
            document.getElementById('editCategoryId').value = id;
            document.getElementById('editName').value = name;
            document.getElementById('editIconClass').value = iconClass || '';
            document.getElementById('editDescription').value = description || '';
            clearValidationErrors('edit');
            new bootstrap.Modal(document.getElementById('editCategoryModal')).show();
        }

        // Delete Category Function
        function confirmDelete(categoryId, categoryName) {
            document.getElementById('deleteCategoryId').value = categoryId;
            document.getElementById('deleteCategoryName').textContent = categoryName;
            document.getElementById('deleteForm').action = '/Manage/Categories?handler=Delete';

            var deleteModal = new bootstrap.Modal(document.getElementById('deleteModal'));
            deleteModal.show();
        }

        // Clear Validation Errors
        function clearValidationErrors(prefix) {
            ['Name', 'IconClass', 'Description'].forEach(f => {
                const inp = document.getElementById(prefix + f);
                const err = document.getElementById(prefix + f + 'Error');
                if (inp) inp.classList.remove('is-invalid');
                if (err) err.textContent = '';
            });
        }

        // Handle Create Form Reset
        document.getElementById('createCategoryModal').addEventListener('hidden.bs.modal', function () {
            document.getElementById('createCategoryForm').reset();
            clearValidationErrors('create');
        });

        // Handle Edit Form Reset  
        document.getElementById('editCategoryModal').addEventListener('hidden.bs.modal', function () {
            clearValidationErrors('edit');
        });

        // Handle Create Form Submission
        document.getElementById('createCategoryForm').addEventListener('submit', async function (e) {
            e.preventDefault();

            const formData = new FormData(this);

            try {
                const response = await fetch('/Manage/Categories?handler=Create', {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();

                if (result.success) {
                    bootstrap.Modal.getInstance(document.getElementById('createCategoryModal')).hide();
                    location.reload(); // Reload page to show updated data
                } else {
                    showValidationErrors('create', result.errors);
                }
            } catch (error) {
                console.error('Error creating category:', error);
                alert('Error creating category');
            }
        });

        // Handle Edit Form Submission
        document.getElementById('editCategoryForm').addEventListener('submit', async function (e) {
            e.preventDefault();

            const formData = new FormData(this);

            try {
                const response = await fetch('/Manage/Categories?handler=Update', {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();

                if (result.success) {
                    bootstrap.Modal.getInstance(document.getElementById('editCategoryModal')).hide();
                    location.reload(); // Reload page to show updated data
                } else {
                    showValidationErrors('edit', result.errors);
                }
            } catch (error) {
                console.error('Error updating category:', error);
                alert('Error updating category');
            }
        });

        // Show Validation Errors
        function showValidationErrors(prefix, errors) {
            clearValidationErrors(prefix);
            for (const [field, messages] of Object.entries(errors)) {
                const inputEl = document.getElementById(prefix + field);
                const errorEl = document.getElementById(prefix + field + 'Error');
                if (inputEl && errorEl) {
                    inputEl.classList.add('is-invalid');
                    errorEl.textContent = messages[0];
                }
            }
        }

        // Show success/error messages if they exist
        @if (TempData["Success"] != null)
        {
            <text>
                document.addEventListener('DOMContentLoaded', function () {
                    var alert = document.createElement('div');
                    alert.className = 'alert alert-success alert-dismissible fade show';
                    alert.innerHTML = '@TempData["Success"] <button type="button" class="btn-close" data-bs-dismiss="alert"></button>';
                    document.querySelector('.container-fluid').insertAdjacentElement('afterbegin', alert);
                });
            </text>
        }

        @if (TempData["Error"] != null)
        {
            <text>
                document.addEventListener('DOMContentLoaded', function () {
                    var alert = document.createElement('div');
                    alert.className = 'alert alert-danger alert-dismissible fade show';
                    alert.innerHTML = '@TempData["Error"] <button type="button" class="btn-close" data-bs-dismiss="alert"></button>';
                    document.querySelector('.container-fluid').insertAdjacentElement('afterbegin', alert);
                });
            </text>
        }
    </script>
}