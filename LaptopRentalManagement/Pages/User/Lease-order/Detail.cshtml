@page "{orderId:int}"
@model LaptopRentalManagement.Pages.User.Lease_order.DetailModel
@{
	ViewData["Title"] = "Lease Order Details";
	Layout = "~/Pages/Shared/_CustomerLayout.cshtml";

	var status = Model.Order?.Status ?? "Unknown";

	var slotDates = Model.Order.Slots.Select(s => s.SlotDate).OrderBy(d => d).ToList();
        var start = slotDates.FirstOrDefault();
        var end = slotDates.LastOrDefault();
        var totalDays = slotDates.Count;
        var isRenting = status == "Renting";
        var today = DateOnly.FromDateTime(DateTime.UtcNow);
        var canStartDelivery = status == "Approved" && today >= start;
        var currentStep = status switch
        {
                "Unpaid" => 1,
                "Pending" => 2,
                "Approved" => 3,
                "Delivering" => 4,
                "Renting" => 5,
                "Completed" => 6,
                "Cancelled" => 7,
                _ => 0
        };

        var isCancelled = status == "Cancelled";
}



<div class="container py-5">

	<!-- Breadcrumb -->
	<nav aria-label="breadcrumb" class="mb-4">
		<ol class="breadcrumb">
			<li class="breadcrumb-item"><a href="/">Home</a></li>
			<li class="breadcrumb-item"><a href="/user/lease-order">My Lease Orders</a></li>
			<li class="breadcrumb-item active" aria-current="page">Order #@Model.Order?.OrderId</li>
		</ol>
	</nav>

	@if (Model.Order == null)
	{
		<div class="alert alert-danger text-center">Order not found.</div>
	}
	else
	{
		<!-- Order Status -->
		<div class="mb-5">
			<div class="d-flex justify-content-between align-items-center mb-4">
				<h5 class="fw-bold mb-0">Order Progress</h5>


				<div class="d-flex gap-2">
                                @switch (Model.Order.Status)
                                {
                                        case "Unpaid":
                                                <form method="post" asp-page-handler="Reject" asp-route-orderId="@Model.Order.OrderId" asp-route-id="@Model.Order.Laptop.LaptopId" class="d-inline">
                                                        <button type="submit" class="btn btn-sm btn-danger">
                                                                <i class="fas fa-times me-1"></i>Reject
                                                        </button>
                                                </form>
                                                break;

                                        case "Pending":
                                                <form method="post" asp-page-handler="Approve" asp-route-orderId="@Model.Order.OrderId" asp-route-id="@Model.Order.Laptop.LaptopId" class="d-inline">
                                                        <button type="submit" class="btn btn-sm btn-success">
                                                                <i class="fas fa-check me-1"></i>Approve
                                                        </button>
                                                </form>
                                                <form method="post" asp-page-handler="Reject" asp-route-orderId="@Model.Order.OrderId" asp-route-id="@Model.Order.Laptop.LaptopId" class="d-inline ms-1">
                                                        <button type="submit" class="btn btn-sm btn-danger">
                                                                <i class="fas fa-times me-1"></i>Reject
                                                        </button>
                                                </form>
                                                break;

                                                case "Approved":
                                                        @if (canStartDelivery)
                                                        {
                                                                <form method="post" asp-page-handler="Delivering" asp-route-orderId="@Model.Order.OrderId" asp-route-id="@Model.Order.Laptop.LaptopId" class="d-inline">
                                                                        <button type="submit" class="btn btn-sm btn-warning">
                                                                                <i class="fas fa-truck me-1"></i>Start Delivery
                                                                        </button>
                                                                </form>
                                                        }
                                                        else
                                                        {
                                                                <span class="text-muted">Awaiting rental date</span>
                                                        }
                                                        break;

						case "Delivering":
							<form method="post" asp-page-handler="Delivered" asp-route-orderId="@Model.Order.OrderId" asp-route-id="@Model.Order.Laptop.LaptopId" class="d-inline">
								<button type="submit" class="btn btn-sm btn-success">
									<i class="fas fa-box-check me-1"></i>Delivered
								</button>
							</form>
							<button type="button" class="btn btn-sm btn-danger"
									data-bs-toggle="modal"
									data-bs-target="#deliveryFailModal"
									onclick="openDeliveryFailModal(@Model.Order.OrderId)">
								<i class="fas fa-times-circle me-1"></i>Delivery Failed
							</button>
							break;

						default:
							<span class="text-muted">No actions</span>
							break;
					}
				</div>

			</div>
                        <div class="stepper">
                                <!-- Step 1: Unpaid -->
                                <div class="step @(isCancelled ? "upcoming" : currentStep > 1 ? "complete" : currentStep == 1 ? "active" : "upcoming")">
                                        <div class="circle">1</div>
                                        <div class="step-label">Unpaid</div>
                                </div>

                                <!-- Step 2: Pending -->
                                <div class="step @(isCancelled ? "upcoming" : currentStep > 2 ? "complete" : currentStep == 2 ? "active" : "upcoming")">
                                        <div class="circle">2</div>
                                        <div class="step-label">Pending</div>
                                </div>

                                <!-- Step 3: Approved -->
                                <div class="step @(isCancelled ? "upcoming" : currentStep > 3 ? "complete" : currentStep == 3 ? "active" : "upcoming")">
                                        <div class="circle">3</div>
                                        <div class="step-label">Approved</div>
                                </div>

                                <!-- Step 4: Delivering -->
                                <div class="step @(isCancelled ? "upcoming" : currentStep > 4 ? "complete" : currentStep == 4 ? "active" : "upcoming")">
                                        <div class="circle">4</div>
                                        <div class="step-label">Delivering</div>
                                </div>

                                <!-- Step 5: Renting -->
                                <div class="step @(isCancelled ? "upcoming" : currentStep > 5 ? "complete" : currentStep == 5 ? "active" : "upcoming")">
                                        <div class="circle">5</div>
                                        <div class="step-label">Renting</div>
                                </div>

                                <!-- Step 6: Complete -->
                                <div class="step @(isCancelled ? "upcoming" : currentStep > 6 ? "complete" : currentStep == 6 ? "active" : "upcoming")">
                                        <div class="circle">6</div>
                                        <div class="step-label">Complete</div>
                                </div>

                                <!-- Step 7: Cancelled -->
                                <div class="step @(isCancelled ? "cancelled" : currentStep == 7 ? "active" : "upcoming")">
                                        <div class="circle">7</div>
                                        <div class="step-label">Cancelled</div>
                                </div>
                        </div>
		</div>
		<div class="row">
			<!-- LEFT: Thông tin laptop + Slots -->
			<div class="col-lg-7">
				<!-- Card: Thông tin cơ bản của laptop -->
				<div class="card mb-4">
					<div class="card-body">
						<h5 class="card-title">@Model.Order.Laptop.Name</h5>
						<p class="text-muted">Brand: @Model.Order.Laptop.Brand.Name</p>
						<p><strong>Price/day:</strong> @Model.Order.Laptop.PricePerDay.ToString("N0")₫</p>
                                                <p><strong>Rental Fee:</strong> <span class="text-primary fw-bold">@Model.Order.RentalFee.ToString("N0")₫</span></p>
                                                <p><strong>Deposit:</strong> <span class="text-warning fw-bold">@Model.Order.DepositAmount.ToString("N0")₫</span></p>
                                                <p><strong>Total:</strong> <span class="text-primary fw-bold">@Model.Order.TotalCharge.ToString("N0")₫</span></p>
						<p>
							<strong>Owner:</strong><br />
							@Model.Order.Owner.Name<br />
							<small class="text-muted">@Model.Order.Owner.Email</small>
						</p>
					</div>
				</div>

				<!-- Card: Hiển thị Slots -->
				<div class="card mb-4">
					<div class="card-body">
						<h5 class="card-title mb-3">Rental Schedule</h5>
						<div class="d-flex overflow-auto gap-3">
							@foreach (var slot in Model.Order.Slots.OrderBy(s => s.SlotDate))
							{
								var dayOfWeek = slot.SlotDate.ToString("dddd", new System.Globalization.CultureInfo("en-US"));

								<div class="rounded p-3 text-center shadow-sm min-w-200px">
									<div class="fw-bold text-uppercase">@dayOfWeek</div>
									<div>@slot.SlotDate.ToString("dd/MM/yyyy")</div>

								</div>
							}
						</div>
					</div>
				</div>
			</div>

			<!-- RIGHT: Order Logs -->
			<div class="col-lg-5">
				<div class="card mb-4">
					<div class="card-body scroll-box">
						<h5 class="card-title mb-3">Order Logs</h5>

						@if (Model.Logs != null && Model.Logs.Any())
						{
							<ul class="list-group list-group-flush">
								@foreach (var log in Model.Logs.OrderByDescending(l => l.CreatedAt))
								{
									var modalId = $"logImgModal_{log.Id}";
									<li class="list-group-item">
										<div class="d-flex justify-content-between align-items-start mb-1">
											<span class="fw-semibold">@log.Content</span>
											<small class="text-muted">@log.CreatedAt.ToString("HH:mm dd-MM-yyyy")</small>
										</div>

										@if (!string.IsNullOrWhiteSpace(log.OldStatus) || !string.IsNullOrWhiteSpace(log.NewStatus))
										{
											<div class="mt-1">
												<span class="badge bg-secondary">@log.OldStatus</span>
												<i class="fas fa-arrow-right mx-1 text-muted"></i>
												<span class="badge bg-success">@log.NewStatus</span>
											</div>
										}

										@if (log.LogImg != null && log.LogImg.Any())
										{
											<div class="mt-2">
												<a href="#" class="text-decoration-underline text-primary small" data-bs-toggle="modal" data-bs-target="#@modalId">
													📷 Click to open images
												</a>

												<!-- Modal hiển thị ảnh -->
												<div class="modal fade" id="@modalId" tabindex="-1" aria-hidden="true">
													<div class="modal-dialog modal-dialog-centered modal-xl">
														<div class="modal-content">
															<div class="modal-header">
																<h5 class="modal-title">Images for log #@log.Id</h5>
																<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
															</div>
															<div class="modal-body">
																<div class="d-flex flex-wrap gap-3 justify-content-start">
																	@foreach (var imgUrl in log.LogImg)
																	{
																		<img src="@imgUrl" class="img-thumbnail" style="max-height: 200px;" />
																	}
																</div>
															</div>
														</div>
													</div>
												</div>
											</div>
										}
									</li>
								}
							</ul>
						}
						else
						{
							<p class="text-muted">No logs available for this order.</p>
						}
					</div>
				</div>
				<!-- Tickets -->
				<div class="card mb-4">
					<div class="card-body scroll-box">
						<h5 class="card-title mb-3">Tickets</h5>

						@if (Model.Tickets != null && Model.Tickets.Any())
						{
							<ul class="list-group list-group-flush">
								@foreach (var t in Model.Tickets.OrderByDescending(x => x.CreatedAt))
								{
									<li class="list-group-item">
										<div class="d-flex justify-content-between align-items-start">
											<div>
												<span class="fw-semibold">Ticket #@t.TicketId</span>
												<span class="badge bg-info">
													@t.Status
												</span>
											</div>
											<small class="text-muted">@t.CreatedAt.ToString("HH:mm dd-MM-yyyy")</small>
										</div>
										<p class="mt-2 mb-1">@t.Content</p>

										@if (t.RespondedAt.HasValue)
										{
											<div class="border-start ps-3">
												<small class="text-muted">
                                                                               Responded at @t.RespondedAt.Value.ToString("HH:mm dd-MM-yyyy")
												</small>
												<p class="mb-1">@t.Response</p>
											</div>
										}
									</li>
								}
							</ul>
						}
						else
						{
                                                        <p class="text-muted mb-0">No support requests yet.</p>
						}
					</div>
				</div>
			</div>
		</div>

		<div class="modal fade" id="deliveryFailModal" tabindex="-1" aria-labelledby="deliveryFailModalLabel" aria-hidden="true">
			<div class="modal-dialog">
				<form method="post" enctype="multipart/form-data" asp-page-handler="DeliveredFail" class="modal-content">
					<input type="hidden" id="failOrderId" name="orderId" />
					<input type="hidden" name="id" value="@Model.Order.Laptop.LaptopId" />

					<div class="modal-header">
						<h5 class="modal-title" id="deliveryFailModalLabel">Reason for Delivery Failure</h5>
						<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
					</div>

					<div class="modal-body">
						<div class="mb-3">
							<label for="reason" class="form-label">Reason</label>
							<textarea name="reason" class="form-control" required></textarea>
						</div>
						<div class="mb-3">
							<label for="imageInput" class="form-label">Evidence Images</label>
							<input asp-for="Images"
								   id="imageInput"
								   type="file"
								   class="form-control"
								   accept="image/*"
								   multiple />
							<div class="form-text">Tối đa 3 ảnh.</div>
							<div class="mt-3 d-flex flex-wrap gap-2" id="imagePreviewContainer"></div>
						</div>
					</div>

					<div class="modal-footer">
						<button type="submit" class="btn btn-danger">Submit</button>
						<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
					</div>
				</form>
			</div>
		</div>
	}
</div>

@await Html.PartialAsync(
						"~/Pages/User/Rental-Order/_TicketModal.cshtml",
						new LaptopRentalManagement.BLL.DTOs.Request.CreateTicketRequest
					{
						OrderId = Model.Order.OrderId
					}
							)

@section Styles {
	<link rel="stylesheet" href="~/css/order-progress.css" />
	<style>
		.scroll-box {
			max-height: 450px;
			overflow-y: auto;
		}

			/* Tùy chọn: thanh cuộn mượt và đẹp hơn */
			.scroll-box::-webkit-scrollbar {
				width: 8px;
			}

			.scroll-box::-webkit-scrollbar-thumb {
				background-color: rgba(0, 0, 0, 0.2);
				border-radius: 4px;
			}
	</style>
}

@section Scripts {
	<script>
		let selectedFiles = [];

		function openDeliveryFailModal(orderId) {
			document.getElementById("failOrderId").value = orderId;
			resetImagePreview();
		}

		function resetImagePreview() {
			selectedFiles = [];
			document.getElementById("imageInput").value = '';
			document.getElementById("imagePreviewContainer").innerHTML = '';
		}

		document.addEventListener('DOMContentLoaded', () => {
			const input = document.getElementById('imageInput');
			const container = document.getElementById('imagePreviewContainer');
			let selectedFiles = [];

			// Cập nhật input.files từ selectedFiles
			function syncInputFiles() {
				const dt = new DataTransfer();
				selectedFiles.forEach(f => dt.items.add(f));
				input.files = dt.files;
			}

			// Xóa toàn bộ preview
			function clearPreviews() {
				container.innerHTML = '';
				selectedFiles = [];
				syncInputFiles();
			}

			// Mở modal thì reset preview
			window.openDeliveryFailModal = orderId => {
				document.getElementById("failOrderId").value = orderId;
				clearPreviews();
			};

			input.addEventListener('change', () => {
				const newFiles = Array.from(input.files);
				if (selectedFiles.length + newFiles.length > 3) {
					alert("Chỉ được chọn tối đa 3 ảnh.");
					return;
				}
				newFiles.forEach(file => {
					if (!file.type.startsWith('image/')) return;
					selectedFiles.push(file);

					// tạo preview
					const wrapper = document.createElement('div');
					wrapper.style.position = 'relative';

					const img = document.createElement('img');
					img.src = URL.createObjectURL(file);
					img.style.height = '80px';
					img.style.borderRadius = '6px';
					img.style.objectFit = 'cover';
					img.style.border = '1px solid #ccc';
					img.style.padding = '2px';
					wrapper.appendChild(img);

					const removeBtn = document.createElement('button');
					removeBtn.type = 'button';
					removeBtn.textContent = '✕';
					Object.assign(removeBtn.style, {
						position: 'absolute',
						top: '0', right: '0',
						background: 'rgba(0,0,0,0.5)',
						color: 'white',
						border: 'none',
						borderRadius: '50%',
						width: '20px',
						height: '20px',
						cursor: 'pointer'
					});
					removeBtn.onclick = () => {
						const idx = selectedFiles.indexOf(file);
						if (idx > -1) selectedFiles.splice(idx, 1);
						wrapper.remove();
						syncInputFiles();
					};
					wrapper.appendChild(removeBtn);

					container.appendChild(wrapper);
				});

				// Cuối cùng, sync lại input.files
				syncInputFiles();
			});
		});
	</script>
}