@page "{id:int}"
@model LaptopRentalManagement.Pages.User.Laptops.DetailsModel
@{
    ViewData["Title"] = "Laptop Rental Details";
    Layout = "~/Pages/Shared/_CustomerLayout.cshtml";
}

<div class="container py-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2 class="mb-0">Manage Laptop: @(Model.Laptop?.Name ?? "Unknown")</h2>
        <div>
            <a href="/user/laptops" class="btn btn-secondary">
                <i class="fas fa-arrow-left me-1"></i> My Laptops
            </a>
            <a href="/laptops/details/@Model.Laptop.LaptopId" class="btn btn-outline-info" target="_blank">
                <i class="fas fa-eye me-1"></i> Public View
            </a>
        </div>
    </div>
    
    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success">@TempData["Success"]</div>
    }
    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger">@TempData["Error"]</div>
    }

    <div class="card mb-4">
        <div class="card-body">
            <div class="row">
                <div class="col-md-5">
                    <img src="@(string.IsNullOrEmpty(Model.Laptop.ImageURL) ? "/images/default-laptop.png" : Model.Laptop.ImageURL)" class="img-fluid rounded shadow-sm" alt="Laptop image" />
                </div>
                <div class="col-md-7">
                    <h4>@Model.Laptop.Name</h4>
                    <p class="mb-1"><strong>Brand:</strong> @Model.Laptop.Brand.Name</p>
                    <p class="mb-1"><strong>CPU:</strong> @Model.Laptop.Cpu</p>
                    <p class="mb-1"><strong>RAM:</strong> @Model.Laptop.Ram GB</p>
                    <p class="mb-1"><strong>Storage:</strong> @Model.Laptop.Storage GB</p>
                    <p class="text-success fs-5 fw-bold mt-3">@Model.Laptop.PricePerDay.ToString("N0") đ / day</p>
                    <p class="text-muted small">Deposit: @Model.Laptop.Deposit.ToString("N0") đ</p>
                    <hr/>
                    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#editLaptopModal">
                        <i class="fas fa-edit me-2"></i>Edit Information
                    </button>
                    <button class="btn btn-outline-primary" data-bs-toggle="modal" data-bs-target="#rentOutModal">
                        <i class="fas fa-calendar-alt me-2"></i>Manage Availability
                    </button>
                </div>
            </div>
        </div>
    </div>
    
    <h4 class="mb-3">Rental History</h4>
    @if (Model.Orders != null && Model.Orders.Any())
    {
        <table class="table table-bordered table-hover">
            <thead class="table-light">
                <tr>
                    <th>#</th>
                    <th>Renter</th>
                    <th>Rental Dates</th>
                    <th>Total Days</th>
                    <th>Status</th>
                    <th>Total Charge</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var order in Model.Orders.OrderByDescending(o => o.OrderId))
                {
                    <tr>
                        <td>@order.OrderId</td>
                        <td>@(order.Renter?.Name ?? "Not assigned")</td>
                        <td>@string.Join(", ", order.Slots.Select(s => s.SlotDate.ToString("dd/MM/yyyy")))</td>
                        <td>@order.Slots.Count</td>
                        <td>@order.Status</td>
                        <td>@order.TotalCharge.ToString("N0") đ</td>
                        @*<td class="text-nowrap">
                @switch (order.Status)
                {
                case "Pending":
                <form method="post" asp-page-handler="Approve" asp-route-orderId="@order.OrderId" asp-route-id="@Model.Laptop.LaptopId" class="d-inline">
                <button type="submit" class="btn btn-sm btn-success">
                <i class="fas fa-check me-1"></i>Approve
                </button>
                </form>
                <form method="post" asp-page-handler="Reject" asp-route-orderId="@order.OrderId" asp-route-id="@Model.Laptop.LaptopId" class="d-inline ms-1">
                <button type="submit" class="btn btn-sm btn-danger">
                <i class="fas fa-times me-1"></i>Reject
                </button>
                </form>
                break;

                case "Approved":
                <form method="post" asp-page-handler="Delivering" asp-route-orderId="@order.OrderId" asp-route-id="@Model.Laptop.LaptopId" class="d-inline">
                <button type="submit" class="btn btn-sm btn-warning">
                <i class="fas fa-truck me-1"></i>Start Delivery
                </button>
                </form>
                break;

                case "Delivering":
                <form method="post" asp-page-handler="Delivered" asp-route-orderId="@order.OrderId" asp-route-id="@Model.Laptop.LaptopId" class="d-inline">
                <button type="submit" class="btn btn-sm btn-success">
                <i class="fas fa-box-check me-1"></i>Delivered
                </button>
                </form>
                <button type="button" class="btn btn-sm btn-danger"
                data-bs-toggle="modal"
                data-bs-target="#deliveryFailModal"
                onclick="openDeliveryFailModal(@order.OrderId)">
                <i class="fas fa-times-circle me-1"></i>Delivery Failed
                </button>
                break;

                default:
                <span class="text-muted">No actions</span>
                break;
                }
                </td>*@
                        <td class="text-nowrap">
                            <a href="/user/lease-order/detail/@order.OrderId" class="btn btn-sm btn-outline-primary">
                                <i class="fas fa-info-circle me-1"></i>View Details
                            </a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p class="text-muted">No rental orders found for this laptop.</p>
    }

    <hr class="my-4" />

    <h4 class="mb-3">Rental Slots</h4>

    <form class="d-flex gap-2 mb-3">
        <select id="monthSelect" class="form-select w-auto">
            @for (int m = 1; m <= 12; m++)
            {
                <option value="@m" selected="@(m == DateTime.Now.Month ? "selected" : null)">
                    @System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(m)
                </option>
            }
        </select>
        <select id="yearSelect" class="form-select w-auto">
            @for (int y = DateTime.Now.Year - 2; y <= DateTime.Now.Year + 2; y++)
            {
                <option value="@y" selected="@(y == DateTime.Now.Year ? "selected" : null)">@y</option>
            }
        </select>
        <input type="hidden" id="laptopId" value="@Model.Laptop.LaptopId" />
    </form>

    <div id="slots-container">
        @await Html.PartialAsync("_RentalSlotsPartial", Model.RentalSlot)
    </div>

</div>

@await Html.PartialAsync("_RentOutModal", Model.Laptop)

<div class="modal fade" id="editLaptopModal" tabindex="-1" aria-labelledby="editLaptopModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <form method="post" asp-page-handler="Edit" enctype="multipart/form-data">
                <div class="modal-header">
                    <h5 class="modal-title" id="editLaptopModalLabel">Edit Laptop</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div asp-validation-summary="ModelOnly" class="alert alert-danger"></div>
                    <input type="hidden" asp-for="EditLaptop.LaptopId" />
                    
                    <div class="row gx-3">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label asp-for="EditLaptop.Name" class="form-label">Laptop Name</label>
                                <input asp-for="EditLaptop.Name" class="form-control" required/>
                            </div>
                            <div class="mb-3">
                                <label asp-for="EditLaptop.Description" class="form-label"></label>
                                <textarea asp-for="EditLaptop.Description" class="form-control" rows="4"></textarea>
                            </div>
                            <div class="mb-3">
                                <label asp-for="EditLaptop.BrandId" class="form-label">Brand</label>
                                <select asp-for="EditLaptop.BrandId" class="form-select" asp-items="@(new SelectList(Model.Brands, "BrandId", "Name"))" required>
                                    <option value="">-- Select Brand --</option>
                                </select>
                            </div>
                             <div class="row">
                                <div class="col-6 mb-3">
                                    <label asp-for="EditLaptop.PricePerDay" class="form-label"></label>
                                    <input asp-for="EditLaptop.PricePerDay" type="number" class="form-control" required min="0"/>
                                </div>
                                <div class="col-6 mb-3">
                                     <label asp-for="EditLaptop.Deposit" class="form-label"></label>
                                     <input asp-for="EditLaptop.Deposit" type="number" class="form-control" required min="0"/>
                                </div>
                            </div>
                        </div>

                        <div class="col-md-6">
                            <div class="mb-3">
                                <label asp-for="EditLaptop.ImageFile" class="form-label">Change Image (Optional)</label>
                                <div class="text-center mb-2">
                                    <img id="editImagePreview" src="@(string.IsNullOrEmpty(Model.Laptop.ImageURL) ? "/images/default-laptop.png" : Model.Laptop.ImageURL)" class="img-thumbnail" style="width: 200px; height: 200px; object-fit: cover;" alt="Image Preview"/>
                                </div>
                                <input asp-for="EditLaptop.ImageFile" type="file" class="form-control" accept="image/*" id="editImageInput"/>
                                <div class="form-text">Leave blank to keep the current image.</div>
                            </div>
                             <div class="mb-3">
                                <label asp-for="EditLaptop.Cpu" class="form-label">CPU</label>
                                <input asp-for="EditLaptop.Cpu" class="form-control" required/>
                            </div>
                            <div class="row">
                                <div class="col-6 mb-3">
                                    <label asp-for="EditLaptop.Ram" class="form-label">RAM (GB)</label>
                                    <input asp-for="EditLaptop.Ram" type="number" class="form-control" required min="1"/>
                                </div>
                                <div class="col-6 mb-3">
                                    <label asp-for="EditLaptop.Storage" class="form-label">Storage (GB)</label>
                                    <input asp-for="EditLaptop.Storage" type="number" class="form-control" required min="1"/>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Categories</label>
                        <div class="row">
                            @foreach (var category in Model.Categories)
                            {
                                <div class="col-6 col-md-4">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="EditLaptop.CategoryIds" value="@category.CategoryId" 
                                               id="edit_cat_@category.CategoryId" @(Model.EditLaptop.CategoryIds.Contains(category.CategoryId) ? "checked" : "")/>
                                        <label class="form-check-label" for="edit_cat_@category.CategoryId">@category.Name</label>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Save Changes</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        async function updateSlots() {
            const month = document.getElementById("monthSelect").value;
            const year = document.getElementById("yearSelect").value;
            const id = document.getElementById("laptopId").value;

            try {
                const response = await fetch(`?handler=RentalSlots&id=${id}&month=${month}&year=${year}`);
                if (!response.ok) {
                    throw new Error("Network response was not ok");
                }
                const html = await response.text();
                document.getElementById("slots-container").innerHTML = html;
            } catch (err) {
                console.error("Failed to fetch rental slots:", err);
            }
        }

        function initSlotSelector() {
            document.getElementById("monthSelect").addEventListener("change", updateSlots);
            document.getElementById("yearSelect").addEventListener("change", updateSlots);
        }

        document.addEventListener("DOMContentLoaded", initSlotSelector);

		let selectedFiles = [];

		function openDeliveryFailModal(orderId) {
			document.getElementById("failOrderId").value = orderId;
			resetImagePreview();
		}

		function resetImagePreview() {
			selectedFiles = [];
			document.getElementById("imageInput").value = '';
			document.getElementById("imagePreviewContainer").innerHTML = '';
		}

		document.addEventListener('DOMContentLoaded', () => {
			const input = document.getElementById('imageInput');
			const container = document.getElementById('imagePreviewContainer');
			let selectedFiles = [];

			// Cập nhật input.files từ selectedFiles
			function syncInputFiles() {
				const dt = new DataTransfer();
				selectedFiles.forEach(f => dt.items.add(f));
				input.files = dt.files;
			}

			// Xóa toàn bộ preview
			function clearPreviews() {
				container.innerHTML = '';
				selectedFiles = [];
				syncInputFiles();
			}

			// Mở modal thì reset preview
			window.openDeliveryFailModal = orderId => {
				document.getElementById("failOrderId").value = orderId;
				clearPreviews();
			};

			input.addEventListener('change', () => {
				const newFiles = Array.from(input.files);
				if (selectedFiles.length + newFiles.length > 3) {
					alert("Chỉ được chọn tối đa 3 ảnh.");
					return;
				}
				newFiles.forEach(file => {
					if (!file.type.startsWith('image/')) return;
					selectedFiles.push(file);

					// tạo preview
					const wrapper = document.createElement('div');
					wrapper.style.position = 'relative';

					const img = document.createElement('img');
					img.src = URL.createObjectURL(file);
					img.style.height = '80px';
					img.style.borderRadius = '6px';
					img.style.objectFit = 'cover';
					img.style.border = '1px solid #ccc';
					img.style.padding = '2px';
					wrapper.appendChild(img);

					const removeBtn = document.createElement('button');
					removeBtn.type = 'button';
					removeBtn.textContent = '✕';
					Object.assign(removeBtn.style, {
						position: 'absolute',
						top: '0', right: '0',
						background: 'rgba(0,0,0,0.5)',
						color: 'white',
						border: 'none',
						borderRadius: '50%',
						width: '20px',
						height: '20px',
						cursor: 'pointer'
					});
					removeBtn.onclick = () => {
						const idx = selectedFiles.indexOf(file);
						if (idx > -1) selectedFiles.splice(idx, 1);
						wrapper.remove();
						syncInputFiles();
					};
					wrapper.appendChild(removeBtn);

					container.appendChild(wrapper);
				});

				// Cuối cùng, sync lại input.files
				syncInputFiles();
			});
		});

	</script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
	<script>
		const connection = new signalR.HubConnectionBuilder()
			.withUrl("/rentalHub")
			.build();
		connection.on("ReceiveSlotUpdate", (data) => {
			const currentLaptopId = parseInt(document.getElementById("laptopId")?.value);
			if (data.LaptopId !== currentLaptopId) return;

			location.reload(); // ← Đây là phần reload toàn trang
		});
	</script>
}